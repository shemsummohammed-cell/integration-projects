

CREATE COMPUTE MODULE USECASE6_FLW_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
	
		SET Environment.Varible.RESULT.RECORD[]= SELECT Q.* FROM Database.db2admin.BOOKLIST AS Q;
		DECLARE INREF REFERENCE TO Environment.Varible.RESULT;
		DECLARE INREF1 REFERENCE TO INREF.RECORD;
		DECLARE INREF2 REFERENCE TO InputRoot.XMLNSC.CUSTOMERPURCHASE;
		
		WHILE (LASTMOVE(INREF1)) DO
			IF INREF.BOOKNAME = INREF2.BOOKNAME THEN
				IF INREF.BOOKNAME >0 THEN
					
					INSERT INTO Database.db2admin.CUSTOMERINFO VALUES(INREF2.FNAME, INREF2.LNAME, INREF2.STREET, INREF2.APT,INREF2.CITY, INREF2.STATE, INREF2.CARDNUMBER);
				SET OutputRoot.XMLNSC.INFO= 'BOOK IS AVALABALE';
				DECLARE BQ INT INREF1.QUANTITY;
				DECLARE BQ1 INT INREF2.QUANTITY;
				SET BQ=BQ-BQ1;
				UPDATE Database.db2admin.BOOKLIST SET DATEUPDATE = INREF2.PDATE WHERE INREF1.BOOKNAME = INREF2.BOOKNAME;
				UPDATE Database.db2admin.BOOKLIST SET QUANTITY = INREF.QUANTITY WHERE INREF2.BOOKNAME = INREF2.BOOKNAME;
		
				ELSE
					CREATE FIELD OutputRoot.XMLNSC.ALERT;
					DECLARE OUTREF REFERENCE TO OutputRoot.XMLNSC.ALERT; 
					SET OutputRoot.XMLNSC.INFO = 'BOOK IS NOT AVALABALE';
					PROPAGATE TO TERMINAL 'out1';
					END IF;
			END IF;
			MOVE INREF NEXTSIBLING;
		END WHILE;
	
	


		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
